#!/bin/bash

echo "üöÄ Debian/Ubuntu ÁΩëÁªúÊµãÈÄü‰∏éËØäÊñ≠ËÑöÊú¨"

# ËÑöÊú¨‰ø°ÊÅØ
SCRIPT_NAME="network-speedtest"
SCRIPT_VERSION="2.0.0"
SCRIPT_AUTHOR="Á≥ªÁªü‰ºòÂåñÁâà"

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_result() {
    echo -e "${CYAN}üìä $1${NC}"
}

log_debug() {
    if [ "$DEBUG" = "true" ]; then
        echo -e "${PURPLE}üêõ $1${NC}"
    fi
}

# ÊòæÁ§∫Ê†áÈ¢ò
show_header() {
    echo "=================================================="
    echo "           üöÄ $SCRIPT_NAME v$SCRIPT_VERSION"
    echo "              $SCRIPT_AUTHOR"
    echo "=================================================="
}

# Ê£ÄÊü•Á≥ªÁªüÂÖºÂÆπÊÄß
check_system() {
    log_info "Ê£ÄÊü•Á≥ªÁªüÁéØÂ¢É..."
    
    # Ê£ÄÊü•ÊòØÂê¶‰∏∫ Debian/Ubuntu Á≥ª
    if [ ! -f /etc/debian_version ] && [ ! -f /etc/lsb-release ]; then
        if [ -f /etc/redhat-release ] || [ -f /etc/centos-release ]; then
            log_warning "Ê£ÄÊµãÂà∞ RedHat/CentOS Á≥ªÁªüÔºåÈÉ®ÂàÜÂäüËÉΩÂèØËÉΩÈúÄË¶ÅË∞ÉÊï¥"
        elif [ -f /etc/alpine-release ]; then
            log_warning "Ê£ÄÊµãÂà∞ Alpine LinuxÔºåÂª∫ËÆÆ‰ΩøÁî® Debian/Ubuntu Á≥ªÁªü"
        else
            log_warning "Èùû Debian/Ubuntu Á≥ªÁªüÔºåÂÖºÂÆπÊÄßÂèØËÉΩÂèóÈôê"
        fi
    fi

    # Ê£ÄÊµãÁ≥ªÁªüÁâàÊú¨
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        log_info "Ê£ÄÊµãÂà∞Á≥ªÁªü: $PRETTY_NAME"
        
        # Ê£ÄÊü•Á≥ªÁªüÊû∂ÊûÑ
        local arch=$(uname -m)
        log_info "Á≥ªÁªüÊû∂ÊûÑ: $arch"
        
        # Ê£ÄÊü•ÂÜÖÊ†∏ÁâàÊú¨
        local kernel=$(uname -r)
        log_info "ÂÜÖÊ†∏ÁâàÊú¨: $kernel"
    fi

    # Ê£ÄÊü•ÊùÉÈôê
    if [ "$EUID" -eq 0 ]; then
        log_warning "ÂΩìÂâç‰ª• root ÊùÉÈôêËøêË°å"
    else
        log_info "ÂΩìÂâç‰ª•ÊôÆÈÄöÁî®Êà∑ÊùÉÈôêËøêË°åÔºåÈÉ®ÂàÜÊìç‰ΩúÈúÄË¶Å sudo"
    fi
}

# Ê£ÄÊü•Âπ∂ÂÆâË£ÖÂøÖË¶ÅÂ∑•ÂÖ∑
install_required_tools() {
    log_info "Ê£ÄÊü•Á≥ªÁªüÂ∑•ÂÖ∑..."
    
    local packages=()
    local package_manager=""
    local install_cmd=""
    
    # Ê£ÄÊµãÂåÖÁÆ°ÁêÜÂô®
    if command -v apt-get &> /dev/null; then
        package_manager="apt"
        install_cmd="sudo apt-get install -y"
    elif command -v yum &> /dev/null; then
        package_manager="yum"
        install_cmd="sudo yum install -y"
    elif command -v dnf &> /dev/null; then
        package_manager="dnf"
        install_cmd="sudo dnf install -y"
    elif command -v apk &> /dev/null; then
        package_manager="apk"
        install_cmd="sudo apk add"
    else
        log_error "Êú™ÊâæÂà∞ÊîØÊåÅÁöÑÂåÖÁÆ°ÁêÜÂô®"
        return 1
    fi
    
    log_info "‰ΩøÁî®ÂåÖÁÆ°ÁêÜÂô®: $package_manager"
    
    # Âü∫Á°ÄÂ∑•ÂÖ∑ÂàóË°®
    local base_tools=("curl" "wget" "ping" "bc" "dig" "traceroute")
    
    # Ê†πÊçÆÂåÖÁÆ°ÁêÜÂô®Ë∞ÉÊï¥ÂåÖÂêç
    case $package_manager in
        "apt")
            packages=("curl" "wget" "iputils-ping" "bc" "dnsutils" "traceroute")
            ;;
        "yum"|"dnf")
            packages=("curl" "wget" "iputils" "bc" "bind-utils" "traceroute")
            ;;
        "apk")
            packages=("curl" "wget" "iputils" "bc" "bind-tools" "traceroute")
            ;;
    esac
    
    # Êõ¥Êñ∞ÂåÖÂàóË°®
    log_info "Êõ¥Êñ∞ËΩØ‰ª∂ÂåÖÂàóË°®..."
    case $package_manager in
        "apt") sudo apt-get update ;;
        "yum") sudo yum check-update || true ;;
        "dnf") sudo dnf check-update || true ;;
        "apk") sudo apk update ;;
    esac
    
    # Ê£ÄÊü•Âπ∂ÂÆâË£ÖÁº∫Â§±ÁöÑÂåÖ
    local missing_packages=()
    
    for pkg in "${packages[@]}"; do
        if ! command -v "${pkg%% *}" &> /dev/null && ! dpkg -l | grep -q "^ii  ${pkg} " 2>/dev/null; then
            missing_packages+=("$pkg")
        fi
    done
    
    if [ ${#missing_packages[@]} -ne 0 ]; then
        log_warning "ÈúÄË¶ÅÂÆâË£ÖÁº∫Â§±ÁöÑÂåÖ: ${missing_packages[*]}"
        
        if [ "$AUTO_INSTALL" = "true" ]; then
            log_info "Ëá™Âä®ÂÆâË£Ö‰∏≠..."
        else
            read -p "ÊòØÂê¶ÂÆâË£ÖËøô‰∫õÂåÖÔºü(Y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                log_warning "Ë∑≥ËøáÂåÖÂÆâË£ÖÔºåÈÉ®ÂàÜÂäüËÉΩÂèØËÉΩÊó†Ê≥ï‰ΩøÁî®"
                return 0
            fi
        fi
        
        if $install_cmd "${missing_packages[@]}"; then
            log_success "ÂåÖÂÆâË£ÖÂÆåÊàê"
        else
            log_error "ÂåÖÂÆâË£ÖÂ§±Ë¥•"
            return 1
        fi
    else
        log_success "ÊâÄÊúâÂøÖË¶ÅÂ∑•ÂÖ∑Â∑≤ÂÆâË£Ö"
    fi
}

# ÂÆâË£Ö speedtest-cli
install_speedtest() {
    log_info "Ê£ÄÊü• speedtest Â∑•ÂÖ∑..."
    
    # Ê£ÄÊü•ÊòØÂê¶Â∑≤ÂÆâË£Ö
    if command -v speedtest &> /dev/null || command -v speedtest-cli &> /dev/null; then
        log_success "speedtest Â∑≤ÂÆâË£Ö"
        return 0
    fi
    
    log_info "ÂÆâË£Ö speedtest-cli..."
    
    # ÊñπÊ≥ï1: ‰ΩøÁî®Á≥ªÁªüÂåÖÁÆ°ÁêÜÂô®
    case $package_manager in
        "apt")
            if sudo apt-get install -y speedtest-cli 2>/dev/null; then
                log_success "ÈÄöËøá apt ÂÆâË£ÖÊàêÂäü"
                return 0
            fi
            ;;
        "yum"|"dnf")
            if sudo $package_manager install -y speedtest-cli 2>/dev/null; then
                log_success "ÈÄöËøá $package_manager ÂÆâË£ÖÊàêÂäü"
                return 0
            fi
            ;;
    esac
    
    # ÊñπÊ≥ï2: ‰ΩøÁî® pip
    if command -v pip3 &> /dev/null; then
        log_info "Â∞ùËØï‰ΩøÁî® pip3 ÂÆâË£Ö..."
        if pip3 install speedtest-cli 2>/dev/null; then
            log_success "ÈÄöËøá pip3 ÂÆâË£ÖÊàêÂäü"
            return 0
        fi
    fi
    
    # ÊñπÊ≥ï3: ‰ΩøÁî®ÂÆòÊñπËÑöÊú¨
    log_info "‰ΩøÁî®ÂÆòÊñπËÑöÊú¨ÂÆâË£Ö..."
    if curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash 2>/dev/null; then
        if sudo apt-get install -y speedtest 2>/dev/null; then
            log_success "ÈÄöËøáÂÆòÊñπ‰ªìÂ∫ìÂÆâË£ÖÊàêÂäü"
            return 0
        fi
    fi
    
    # ÊñπÊ≥ï4: Áõ¥Êé•‰∏ãËΩΩ
    log_info "Áõ¥Êé•‰∏ãËΩΩ speedtest-cli..."
    if wget -q -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py; then
        chmod +x speedtest-cli
        sudo mv speedtest-cli /usr/local/bin/speedtest-cli
        
        if command -v speedtest-cli &> /dev/null; then
            log_success "speedtest-cli ÂÆâË£ÖÊàêÂäü"
            return 0
        fi
    fi
    
    log_warning "speedtest-cli ÂÆâË£ÖÂ§±Ë¥•ÔºåÂ∞Ü‰ΩøÁî®Â§áÁî®ÊµãÈÄüÊñπÊ≥ï"
    return 1
}

# ÁΩëÁªúËøûÈÄöÊÄßÊµãËØï
test_connectivity() {
    log_info "ÊµãËØïÁΩëÁªúËøûÈÄöÊÄß..."
    
    local test_hosts=(
        "223.5.5.5"           # ÈòøÈáåDNS
        "114.114.114.114"     # 114DNS
        "1.1.1.1"            # Cloudflare
        "8.8.8.8"            # Google DNS
        "119.29.29.29"       # ËÖæËÆØDNS
    )
    
    local connected=false
    local success_count=0
    
    for host in "${test_hosts[@]}"; do
        if ping -c 2 -W 3 "$host" &> /dev/null; then
            log_success "ËøûÈÄö $host"
            connected=true
            ((success_count++))
        else
            log_warning "Êó†Ê≥ïËøûÊé• $host"
        fi
    done
    
    if [ "$connected" = false ]; then
        log_error "ÁΩëÁªúËøûÊé•ÊµãËØïÂ§±Ë¥•"
        return 1
    fi
    
    log_info "ÁΩëÁªúËøûÈÄöÊÄß: $success_count/${#test_hosts[@]} ‰∏™ÊµãËØïÁÇπÊàêÂäü"
    return 0
}

# DNS Ëß£ÊûêÊµãËØï
test_dns() {
    log_info "ÊµãËØï DNS Ëß£Êûê..."
    
    local domains=("baidu.com" "qq.com" "taobao.com" "github.com" "debian.org")
    local success_count=0
    
    for domain in "${domains[@]}"; do
        if dig +short "$domain" &> /dev/null; then
            local ip=$(dig +short "$domain" | head -1)
            log_success "Ëß£Êûê $domain ‚Üí $ip"
            ((success_count++))
        else
            log_warning "Ëß£ÊûêÂ§±Ë¥•: $domain"
        fi
    done
    
    log_info "DNS Ëß£Êûê: $success_count/${#domains[@]} ‰∏™ÂüüÂêçÊàêÂäü"
}

# Âª∂ËøüÊµãËØï
test_latency() {
    log_info "ÊµãËØïÁΩëÁªúÂª∂Ëøü..."
    
    local latency_hosts=(
        "223.5.5.5"           # ÈòøÈáåDNS
        "114.114.114.114"     # 114DNS
        "1.1.1.1"            # Cloudflare
        "8.8.8.8"            # Google DNS
    )
    
    for host in "${latency_hosts[@]}"; do
        if ping -c 4 -W 2 "$host" &> /dev/null; then
            local result
            result=$(ping -c 4 -W 2 "$host" | tail -1 | awk -F'/' '{print "Âπ≥ÂùáÂª∂Ëøü: "$5"ms, ÊäñÂä®: "$6"ms"}')
            log_info "$host - $result"
        else
            log_warning "$host - Âª∂ËøüÊµãËØïÂ§±Ë¥•"
        fi
    done
}

# ‰∏ì‰∏öÊµãÈÄü
test_speed_professional() {
    log_info "ÂºÄÂßã‰∏ì‰∏öÁΩëÁªúÊµãÈÄü..."
    
    # Â∞ùËØï‰ΩøÁî® speedtest
    if command -v speedtest &> /dev/null; then
        log_info "‰ΩøÁî® Ookla speedtest..."
        if speedtest --accept-license --simple; then
            return 0
        fi
    fi
    
    if command -v speedtest-cli &> /dev/null; then
        log_info "‰ΩøÁî® speedtest-cli..."
        local result
        result=$(speedtest-cli --simple 2>/dev/null)
        
        if [ $? -eq 0 ] && [ -n "$result" ]; then
            echo "$result" | while IFS= read -r line; do
                case $line in
                    Ping:*)
                        local ping_value=$(echo "$line" | awk '{print $2 " " $3}')
                        log_result "üîÑ ÁΩëÁªúÂª∂Ëøü: $ping_value"
                        ;;
                    Download:*)
                        local download_value=$(echo "$line" | awk '{print $2 " " $3}')
                        log_result "‚¨áÔ∏è  ‰∏ãËΩΩÈÄüÂ∫¶: $download_value"
                        ;;
                    Upload:*)
                        local upload_value=$(echo "$line" | awk '{print $2 " " $3}')
                        log_result "‚¨ÜÔ∏è  ‰∏ä‰º†ÈÄüÂ∫¶: $upload_value"
                        ;;
                esac
            done
            return 0
        fi
    fi
    
    # Â§áÁî®ÊµãÈÄüÊñπÊ≥ï
    test_speed_backup
}

# Â§áÁî®ÊµãÈÄüÊñπÊ≥ï
test_speed_backup() {
    log_info "‰ΩøÁî®Â§áÁî®ÊñπÊ≥ïÊµãÈÄü..."
    
    # ‰ΩøÁî® cachefly ÁöÑÊµãÈÄüËäÇÁÇπ
    local test_urls=(
        "http://cachefly.cachefly.net/100mb.test"
        "http://speedtest.ftp.otenet.gr/files/test100Mb.db"
    )
    
    for url in "${test_urls[@]}"; do
        log_info "Â∞ùËØïËäÇÁÇπ: $(basename "$url")"
        
        if curl -I --connect-timeout 5 "$url" &> /dev/null; then
            local start_time end_time download_time speed_mbps
            
            start_time=$(date +%s.%N)
            if curl -L --max-time 30 --progress-bar -o /dev/null "$url" &> /dev/null; then
                end_time=$(date +%s.%N)
                download_time=$(echo "$end_time - $start_time" | bc)
                
                if [ -n "$download_time" ] && [ "$(echo "$download_time > 0.1" | bc -l)" -eq 1 ]; then
                    speed_mbps=$(echo "scale=2; (100 * 8) / $download_time" | bc)
                    log_result "‚¨áÔ∏è  ‰∏ãËΩΩÈÄüÂ∫¶: ${speed_mbps} Mbit/s"
                    
                    # ‰º∞ÁÆó‰∏ä‰º†ÈÄüÂ∫¶
                    local upload_speed=$(echo "scale=2; $speed_mbps * 0.4" | bc)
                    log_result "‚¨ÜÔ∏è  ‰∏ä‰º†ÈÄüÂ∫¶: ${upload_speed} Mbit/s (‰º∞ÁÆóÂÄº)"
                    return 0
                fi
            fi
        fi
    done
    
    log_warning "Â§áÁî®ÊµãÈÄüÊñπÊ≥ïÂ§±Ë¥•"
    return 1
}

# ÁΩëÁªúÊé•Âè£‰ø°ÊÅØ
show_network_info() {
    log_info "Êî∂ÈõÜÁΩëÁªú‰ø°ÊÅØ..."
    
    # IP Âú∞ÂùÄ‰ø°ÊÅØ
    log_info "IP Âú∞ÂùÄ‰ø°ÊÅØ:"
    ip -4 addr show | grep inet | awk '{print "  " $2}' | head -5
    
    # ÈªòËÆ§ÁΩëÂÖ≥
    log_info "ÈªòËÆ§ÁΩëÂÖ≥:"
    ip route | grep default | awk '{print "  " $3}'
    
    # DNS ÊúçÂä°Âô®
    log_info "DNS ÊúçÂä°Âô®:"
    if [ -f /etc/resolv.conf ]; then
        grep nameserver /etc/resolv.conf | awk '{print "  " $2}'
    fi
}

# Ë∑ØÁî±ËøΩË∏™
test_traceroute() {
    if [ "$QUICK_MODE" = "true" ]; then
        return 0
    fi
    
    log_info "ËøõË°åË∑ØÁî±ËøΩË∏™..."
    
    if command -v traceroute &> /dev/null; then
        traceroute -m 8 -w 2 223.5.5.5 | head -12
    else
        log_warning "traceroute ‰∏çÂèØÁî®"
    fi
}

# Ê∏ÖÁêÜÂáΩÊï∞
cleanup() {
    log_debug "Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂..."
    rm -f /tmp/speedtest*.tmp
    rm -f speedtest-cli 2>/dev/null
}

# ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
show_help() {
    echo "‰ΩøÁî®ÊñπÊ≥ï: $0 [ÈÄâÈ°π]"
    echo
    echo "ÈÄâÈ°π:"
    echo "  -h, --help         ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"
    echo "  -v, --version      ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ"
    echo "  -q, --quick        Âø´ÈÄüÊ®°ÂºèÔºàË∑≥ËøáË∑ØÁî±ËøΩË∏™Ôºâ"
    echo "  -f, --full         ÂÆåÊï¥Ê®°ÂºèÔºàÂåÖÂê´ËØ¶ÁªÜËØäÊñ≠Ôºâ"
    echo "  -y, --yes          Ëá™Âä®Á°ÆËÆ§ÊâÄÊúâÊèêÁ§∫"
    echo "  -d, --debug        Ë∞ÉËØïÊ®°Âºè"
    echo
    echo "Á§∫‰æã:"
    echo "  $0                  # Ê†áÂáÜÊ®°Âºè"
    echo "  $0 -q               # Âø´ÈÄüÊ®°Âºè"
    echo "  $0 -y               # Ëá™Âä®Á°ÆËÆ§"
}

# ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ
show_version() {
    echo "$SCRIPT_NAME v$SCRIPT_VERSION"
    echo "ÈÄÇÁî®‰∫é Debian/Ubuntu Á≥ªÁªüÁöÑÁΩëÁªúÊµãÈÄüÂ∑•ÂÖ∑"
}

# ÂèÇÊï∞Ëß£Êûê
parse_arguments() {
    QUICK_MODE="false"
    AUTO_INSTALL="false"
    DEBUG="false"
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -q|--quick)
                QUICK_MODE="true"
                shift
                ;;
            -f|--full)
                QUICK_MODE="false"
                shift
                ;;
            -y|--yes)
                AUTO_INSTALL="true"
                shift
                ;;
            -d|--debug)
                DEBUG="true"
                shift
                ;;
            *)
                log_error "Êú™Áü•ÂèÇÊï∞: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# ‰∏ªÂáΩÊï∞
main() {
    # Ëß£ÊûêÂèÇÊï∞
    parse_arguments "$@"
    
    # ÊòæÁ§∫Ê†áÈ¢ò
    show_header
    
    # ËÆæÁΩÆÈîôËØØÂ§ÑÁêÜ
    set -e
    trap 'cleanup; log_error "ËÑöÊú¨ÊâßË°å‰∏≠Êñ≠"; exit 130' INT TERM
    trap 'cleanup' EXIT
    
    # Á≥ªÁªüÊ£ÄÊü•
    check_system
    
    # ÂÆâË£ÖÂøÖË¶ÅÂ∑•ÂÖ∑
    if ! install_required_tools; then
        log_error "Â∑•ÂÖ∑ÂÆâË£ÖÂ§±Ë¥•"
        exit 1
    fi
    
    # ÂÆâË£Ö speedtest
    install_speedtest
    
    # ÊµãËØïÁΩëÁªúËøûÈÄöÊÄß
    if ! test_connectivity; then
        log_error "ÁΩëÁªúËøûÊé•ÊµãËØïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËÆæÁΩÆ"
        exit 1
    fi
    
    echo ""
    
    # ÊòæÁ§∫ÁΩëÁªú‰ø°ÊÅØ
    show_network_info
    
    echo ""
    
    # DNS ÊµãËØï
    test_dns
    
    echo ""
    
    # Âª∂ËøüÊµãËØï
    test_latency
    
    echo ""
    
    # ‰∏ì‰∏öÊµãÈÄü
    if ! test_speed_professional; then
        log_warning "‰∏ì‰∏öÊµãÈÄüÂ§±Ë¥•"
    fi
    
    echo ""
    
    # Ë∑ØÁî±ËøΩË∏™
    if [ "$QUICK_MODE" = "false" ]; then
        test_traceroute
    fi
    
    echo ""
    log_success "ÁΩëÁªúÊµãÈÄüÂÆåÊàê"
    
    # ÊòæÁ§∫‰ΩøÁî®Âª∫ËÆÆ
    echo ""
    log_info "ÊèêÁ§∫:"
    echo "  - ‰ΩøÁî® '$0 -q' ËøõË°åÂø´ÈÄüÊµãÈÄü"
    echo "  - ‰ΩøÁî® '$0 -y' Ëá™Âä®Á°ÆËÆ§ÊâÄÊúâÊèêÁ§∫"
    echo "  - ÂÆöÊúüËøêË°å‰ª•ÁõëÊéßÁΩëÁªúË¥®Èáè"
}

# ËÑöÊú¨ÂÖ•Âè£
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
