#!/bin/bash

# OpenResty/Nginx 403 & 404 ÈîôËØØÈ°µÈù¢‰∏ÄÈîÆÈÉ®ÁΩ≤ËÑöÊú¨
# ÊîØÊåÅDockerÁéØÂ¢ÉÂíå‰º†ÁªüÂÆâË£ÖÊñπÂºè

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Êó•ÂøóÂáΩÊï∞
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_debug() { echo -e "${PURPLE}[DEBUG]${NC} $1"; }

# Ê£ÄÊü•ËøêË°åÁéØÂ¢É
check_environment() {
    log_info "Ê£ÄÊü•ËøêË°åÁéØÂ¢É..."
    
    # Ê£ÄÊü•ÊòØÂê¶ÊòØDockerÁéØÂ¢É
    if docker ps &>/dev/null; then
        # Êü•ÊâæNginxÊàñOpenRestyÂÆπÂô®
        local nginx_container=$(docker ps --filter "name=nginx" --format "{{.Names}}" | head -1)
        local openresty_container=$(docker ps --filter "name=openresty" --format "{{.Names}}" | head -1)
        
        if [ -n "$openresty_container" ]; then
            log_success "ÊâæÂà∞OpenRestyÂÆπÂô®: $openresty_container"
            echo "docker:$openresty_container"
            return 0
        elif [ -n "$nginx_container" ]; then
            log_success "ÊâæÂà∞NginxÂÆπÂô®: $nginx_container"
            echo "docker:$nginx_container"
            return 0
        else
            log_warning "Êú™ÊâæÂà∞Nginx/OpenRestyÂÆπÂô®ÔºåÂ∞ùËØïÂÖ∂‰ªñÊñπÂºè"
        fi
    fi
    
    # Ê£ÄÊü•Á≥ªÁªüÂÆâË£ÖÁöÑOpenResty
    if command -v openresty &>/dev/null; then
        log_success "ÊâæÂà∞Á≥ªÁªüÂÆâË£ÖÁöÑOpenResty"
        echo "system:openresty"
        return 0
    fi
    
    # Ê£ÄÊü•Á≥ªÁªüÂÆâË£ÖÁöÑNginx
    if command -v nginx &>/dev/null; then
        log_success "ÊâæÂà∞Á≥ªÁªüÂÆâË£ÖÁöÑNginx"
        echo "system:nginx"
        return 0
    fi
    
    log_error "Êú™ÊâæÂà∞NginxÊàñOpenResty"
    return 1
}

# ÂàõÂª∫403ÈîôËØØÈ°µÈù¢
create_403_page() {
    local host_data_dir="/boot/data/dataxn"
    
    log_info "Ê≠£Âú®ÂàõÂª∫Êó•Á≥ªÂä®Êº´È£éÊ†º403ÈîôËØØÈ°µÈù¢..."
    
    # Ê£ÄÊü•ÂÆø‰∏ªÊú∫ÁõÆÂΩïÊòØÂê¶Â≠òÂú®
    if [ ! -d "$host_data_dir" ]; then
        log_warning "ÁõÆÂΩï $host_data_dir ‰∏çÂ≠òÂú®ÔºåÊ≠£Âú®ÂàõÂª∫..."
        mkdir -p "$host_data_dir"
    fi
    
    local html_path="$host_data_dir/403.html"
    
    cat > "$html_path" << 'EOF'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ËÆøÈóÆË¢´ÊãíÁªù - 403ÈîôËØØ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial Rounded MT Bold', 'Hiragino Maru Gothic ProN', 'Yu Gothic', sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            color: #2c3e50;
        }
        
        .container {
            max-width: 800px;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 25px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            text-align: center;
            position: relative;
            overflow: hidden;
            border: 3px solid #3498db;
        }
        
        .anime-character {
            width: 180px;
            height: 200px;
            margin: 0 auto 20px;
            position: relative;
        }
        
        .character-head {
            width: 120px;
            height: 120px;
            background-color: #fff;
            border-radius: 50%;
            margin: 0 auto;
            position: relative;
            border: 3px solid #3498db;
            z-index: 2;
        }
        
        .character-hair {
            width: 140px;
            height: 80px;
            background-color: #2980b9;
            border-radius: 70px 70px 0 0;
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1;
        }
        
        .character-eyes {
            display: flex;
            justify-content: space-around;
            width: 80px;
            margin: 40px auto 0;
        }
        
        .eye {
            width: 20px;
            height: 30px;
            background-color: #2c3e50;
            border-radius: 50%;
            position: relative;
            overflow: hidden;
        }
        
        .eye::after {
            content: '';
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: white;
            border-radius: 50%;
            top: 5px;
            left: 5px;
        }
        
        .character-mouth {
            width: 30px;
            height: 10px;
            background-color: #e74c3c;
            border-radius: 0 0 15px 15px;
            margin: 15px auto 0;
        }
        
        .character-body {
            width: 100px;
            height: 80px;
            background-color: #3498db;
            border-radius: 20px 20px 0 0;
            margin: -10px auto 0;
            position: relative;
            z-index: 1;
        }
        
        .error-code {
            font-size: 120px;
            font-weight: bold;
            color: #e74c3c;
            text-shadow: 3px 3px 0 #f39c12;
            margin: 10px 0;
            line-height: 1;
        }
        
        h1 {
            font-size: 32px;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        
        p {
            font-size: 18px;
            line-height: 1.6;
            margin-bottom: 30px;
            color: #34495e;
        }
        
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 12px 25px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
        
        .btn-primary {
            background-color: #3498db;
            color: white;
            box-shadow: 0 4px 0 #2980b9;
        }
        
        .btn-secondary {
            background-color: #9b59b6;
            color: white;
            box-shadow: 0 4px 0 #8e44ad;
        }
        
        .btn-warning {
            background-color: #e67e22;
            color: white;
            box-shadow: 0 4px 0 #d35400;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 0 rgba(0, 0, 0, 0.2);
        }
        
        .btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 0 rgba(0, 0, 0, 0.2);
        }
        
        .floating-elements {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            pointer-events: none;
        }
        
        .floating-element {
            position: absolute;
            opacity: 0.7;
            animation: float 6s ease-in-out infinite;
            font-size: 24px;
        }
        
        .element-1 {
            top: 10%;
            left: 5%;
            animation-delay: 0s;
        }
        
        .element-2 {
            top: 20%;
            right: 10%;
            animation-delay: 2s;
        }
        
        .element-3 {
            bottom: 30%;
            left: 15%;
            animation-delay: 4s;
        }
        
        @keyframes float {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-20px);
            }
        }
        
        .security-icon {
            font-size: 80px;
            margin-bottom: 20px;
            animation: bounce 2s infinite;
        }
        
        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-10px);
            }
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 25px;
            }
            
            .error-code {
                font-size: 80px;
            }
            
            h1 {
                font-size: 24px;
            }
            
            p {
                font-size: 16px;
            }
            
            .action-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="floating-elements">
            <div class="floating-element element-1">üö´</div>
            <div class="floating-element element-2">üîí</div>
            <div class="floating-element element-3">‚ö°</div>
        </div>
        
        <div class="security-icon">üîê</div>
        
        <div class="anime-character">
            <div class="character-hair"></div>
            <div class="character-head">
                <div class="character-eyes">
                    <div class="eye"></div>
                    <div class="eye"></div>
                </div>
                <div class="character-mouth"></div>
            </div>
            <div class="character-body"></div>
        </div>
        
        <div class="error-code">403</div>
        <h1>„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„ÅüÔºÅ</h1>
        <p>Áî≥„ÅóË®≥„ÅÇ„Çä„Åæ„Åõ„Çì„Åå„ÄÅ„Åì„ÅÆ„Éö„Éº„Ç∏„Å∏„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ<br>
        ÂÆà„Çâ„Çå„ÅóÈ†òÂüü„Å∏„ÅØ„ÄÅÈÅ∏„Å∞„Çå„ÅóËÄÖ„Å†„Åë„ÅåÂÖ•„Çã„Åì„Å®„ÅåË®±„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ</p>
        
        <div class="action-buttons">
            <a href="/" class="btn btn-primary">„Éõ„Éº„É†„Å´Êàª„Çã</a>
            <a href="javascript:history.back()" class="btn btn-secondary">Ââç„ÅÆ„Éö„Éº„Ç∏„Å´Êàª„Çã</a>
            <a href="mailto:admin@example.com" class="btn btn-warning">ÁÆ°ÁêÜËÄÖ„Å´ÈÄ£Áµ°</a>
        </div>
    </div>

    <script>
        // Ê∑ªÂä†Èó™ÁÉÅÊïàÊûú
        document.addEventListener('DOMContentLoaded', function() {
            const container = document.querySelector('.container');
            
            for (let i = 0; i < 10; i++) {
                const sparkle = document.createElement('div');
                sparkle.classList.add('sparkle');
                
                // ÈöèÊú∫‰ΩçÁΩÆ
                sparkle.style.left = Math.random() * 100 + '%';
                sparkle.style.top = Math.random() * 100 + '%';
                
                // ÈöèÊú∫Â§ßÂ∞è
                const size = Math.random() * 8 + 3;
                sparkle.style.width = size + 'px';
                sparkle.style.height = size + 'px';
                sparkle.style.backgroundColor = getRandomColor();
                
                // ÈöèÊú∫Âª∂Ëøü
                sparkle.style.animationDelay = Math.random() * 5 + 's';
                
                container.appendChild(sparkle);
            }
            
            function getRandomColor() {
                const colors = ['#3498db', '#e74c3c', '#f39c12', '#9b59b6'];
                return colors[Math.floor(Math.random() * colors.length)];
            }
        });
    </script>
</body>
</html>
EOF

    log_success "403È°µÈù¢Â∑≤ÂàõÂª∫: $html_path"
}

# ÂàõÂª∫404ÈîôËØØÈ°µÈù¢ÔºàÊõ¥Êñ∞ÁâàÔºâ
create_404_page() {
    local host_data_dir="/boot/data/dataxn"
    
    log_info "Ê≠£Âú®ÂàõÂª∫Êó•Á≥ªÂä®Êº´È£éÊ†º404ÈîôËØØÈ°µÈù¢..."
    
    # Ê£ÄÊü•ÂÆø‰∏ªÊú∫ÁõÆÂΩïÊòØÂê¶Â≠òÂú®
    if [ ! -d "$host_data_dir" ]; then
        log_warning "ÁõÆÂΩï $host_data_dir ‰∏çÂ≠òÂú®ÔºåÊ≠£Âú®ÂàõÂª∫..."
        mkdir -p "$host_data_dir"
    fi
    
    local html_path="$host_data_dir/404.html"
    
    cat > "$html_path" << 'EOF'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>È°µÈù¢Êú™ÊâæÂà∞ - 404ÈîôËØØ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial Rounded MT Bold', 'Hiragino Maru Gothic ProN', 'Yu Gothic', sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #ffdde1 0%, #ee9ca7 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            color: #5a3d5c;
        }
        
        .container {
            max-width: 800px;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.85);
            border-radius: 25px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
            position: relative;
            overflow: hidden;
            border: 3px solid #ffb6c1;
        }
        
        .anime-character {
            width: 180px;
            height: 200px;
            margin: 0 auto 20px;
            position: relative;
        }
        
        .character-head {
            width: 120px;
            height: 120px;
            background-color: #fff;
            border-radius: 50%;
            margin: 0 auto;
            position: relative;
            border: 3px solid #ffb6c1;
            z-index: 2;
        }
        
        .character-hair {
            width: 140px;
            height: 80px;
            background-color: #ff69b4;
            border-radius: 70px 70px 0 0;
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1;
        }
        
        .character-eyes {
            display: flex;
            justify-content: space-around;
            width: 80px;
            margin: 40px auto 0;
        }
        
        .eye {
            width: 20px;
            height: 30px;
            background-color: #5a3d5c;
            border-radius: 50%;
            position: relative;
            overflow: hidden;
        }
        
        .eye::after {
            content: '';
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: white;
            border-radius: 50%;
            top: 5px;
            left: 5px;
        }
        
        .character-mouth {
            width: 30px;
            height: 10px;
            background-color: #ff69b4;
            border-radius: 0 0 15px 15px;
            margin: 15px auto 0;
        }
        
        .character-body {
            width: 100px;
            height: 80px;
            background-color: #ffb6c1;
            border-radius: 20px 20px 0 0;
            margin: -10px auto 0;
            position: relative;
            z-index: 1;
        }
        
        .error-code {
            font-size: 120px;
            font-weight: bold;
            color: #ff69b4;
            text-shadow: 3px 3px 0 #ffb6c1;
            margin: 10px 0;
            line-height: 1;
        }
        
        h1 {
            font-size: 32px;
            margin-bottom: 20px;
            color: #5a3d5c;
        }
        
        p {
            font-size: 18px;
            line-height: 1.6;
            margin-bottom: 30px;
            color: #7a5c7d;
        }
        
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 12px 25px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
        
        .btn-primary {
            background-color: #ff69b4;
            color: white;
            box-shadow: 0 4px 0 #d4508f;
        }
        
        .btn-secondary {
            background-color: #b19cd9;
            color: white;
            box-shadow: 0 4px 0 #8a7bb5;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 0 rgba(0, 0, 0, 0.2);
        }
        
        .btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 0 rgba(0, 0, 0, 0.2);
        }
        
        .floating-elements {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            pointer-events: none;
        }
        
        .floating-element {
            position: absolute;
            opacity: 0.7;
            animation: float 6s ease-in-out infinite;
        }
        
        .element-1 {
            top: 10%;
            left: 5%;
            animation-delay: 0s;
        }
        
        .element-2 {
            top: 20%;
            right: 10%;
            animation-delay: 2s;
        }
        
        .element-3 {
            bottom: 30%;
            left: 15%;
            animation-delay: 4s;
        }
        
        @keyframes float {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-20px);
            }
        }
        
        .sparkle {
            position: absolute;
            width: 20px;
            height: 20px;
            background-color: #fff;
            border-radius: 50%;
            opacity: 0;
            animation: sparkle 3s linear infinite;
        }
        
        @keyframes sparkle {
            0%, 100% {
                opacity: 0;
                transform: scale(0);
            }
            50% {
                opacity: 1;
                transform: scale(1);
            }
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 25px;
            }
            
            .error-code {
                font-size: 80px;
            }
            
            h1 {
                font-size: 24px;
            }
            
            p {
                font-size: 16px;
            }
            
            .action-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="floating-elements">
            <div class="floating-element element-1">üå∏</div>
            <div class="floating-element element-2">‚≠ê</div>
            <div class="floating-element element-3">üê±</div>
        </div>
        
        <div class="anime-character">
            <div class="character-hair"></div>
            <div class="character-head">
                <div class="character-eyes">
                    <div class="eye"></div>
                    <div class="eye"></div>
                </div>
                <div class="character-mouth"></div>
            </div>
            <div class="character-body"></div>
        </div>
        
        <div class="error-code">404</div>
        <h1>„Åä„Å£„Å®ÔºÅ„Éö„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</h1>
        <p>Áî≥„ÅóË®≥„ÅÇ„Çä„Åæ„Åõ„Çì„Åå„ÄÅ„ÅäÊé¢„Åó„ÅÆ„Éö„Éº„Ç∏„ÅØÂ≠òÂú®„Åó„Å™„ÅÑ„Åã„ÄÅÁßªÂãï„Åó„ÅüÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ<br>
        Ëø∑Â≠ê„Å´„Å™„Å£„Åü„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅÆ„Çà„ÅÜ„Å´„ÄÅ„Éö„Éº„Ç∏„ÇÇ„Å©„Åì„Åã„Å∏Ë°å„Å£„Å¶„Åó„Åæ„Å£„Åü„Çà„ÅÜ„Åß„Åô„ÄÇ</p>
        
        <div class="action-buttons">
            <a href="/" class="btn btn-primary">„Éõ„Éº„É†„Å´Êàª„Çã</a>
            <a href="javascript:history.back()" class="btn btn-secondary">Ââç„ÅÆ„Éö„Éº„Ç∏„Å´Êàª„Çã</a>
        </div>
    </div>

    <script>
        // Ê∑ªÂä†Èó™ÁÉÅÊïàÊûú
        document.addEventListener('DOMContentLoaded', function() {
            const container = document.querySelector('.container');
            
            for (let i = 0; i < 15; i++) {
                const sparkle = document.createElement('div');
                sparkle.classList.add('sparkle');
                
                // ÈöèÊú∫‰ΩçÁΩÆ
                sparkle.style.left = Math.random() * 100 + '%';
                sparkle.style.top = Math.random() * 100 + '%';
                
                // ÈöèÊú∫Â§ßÂ∞è
                const size = Math.random() * 10 + 5;
                sparkle.style.width = size + 'px';
                sparkle.style.height = size + 'px';
                
                // ÈöèÊú∫Âª∂Ëøü
                sparkle.style.animationDelay = Math.random() * 5 + 's';
                
                container.appendChild(sparkle);
            }
        });
    </script>
</body>
</html>
EOF

    log_success "404È°µÈù¢Â∑≤ÂàõÂª∫: $html_path"
}

# ‰∏∫DockerÂÆπÂô®ÂàõÂª∫NginxÈÖçÁΩÆ
create_docker_nginx_config() {
    local container_name="$1"
    
    log_info "‰∏∫ÂÆπÂô® $container_name ÂàõÂª∫NginxÈîôËØØÈ°µÈù¢ÈÖçÁΩÆ..."
    
    # ÂàõÂª∫ÈÖçÁΩÆÂÜÖÂÆπ
    local config_content=$(cat << 'EOF'
# Ëá™ÂÆö‰πâÈîôËØØÈ°µÈù¢ÈÖçÁΩÆ
error_page 403 /403.html;
error_page 404 /404.html;
error_page 500 502 503 504 /50x.html;

location = /403.html {
    root /usr/share/nginx/html;
    internal;
    allow all;
}

location = /404.html {
    root /usr/share/nginx/html;
    internal;
    allow all;
}

location = /50x.html {
    root /usr/share/nginx/html;
    internal;
    allow all;
}
EOF
)

    # Â∞ÜÈÖçÁΩÆÂÜôÂÖ•ÂÆπÂô®
    local config_path="/etc/nginx/conf.d/custom_errors.conf"
    echo "$config_content" | docker exec -i "$container_name" tee "$config_path" > /dev/null
    
    if [ $? -eq 0 ]; then
        log_success "NginxÈîôËØØÈ°µÈù¢ÈÖçÁΩÆÂ∑≤ÂÜôÂÖ•ÂÆπÂô®: $config_path"
    else
        log_error "Êó†Ê≥ïÂÜôÂÖ•ÂÆπÂô®ÈÖçÁΩÆ"
        return 1
    fi
}

# ‰∏∫Á≥ªÁªüÂÆâË£ÖÂàõÂª∫NginxÈÖçÁΩÆ
create_system_nginx_config() {
    local service_type="$1"
    
    log_info "‰∏∫Á≥ªÁªüÂÆâË£ÖÁöÑ $service_type ÂàõÂª∫ÈîôËØØÈ°µÈù¢ÈÖçÁΩÆ..."
    
    local nginx_conf_dir=""
    case "$service_type" in
        "openresty")
            nginx_conf_dir="/usr/local/openresty/nginx/conf"
            if [ ! -d "$nginx_conf_dir" ]; then
                nginx_conf_dir="/etc/openresty"
            fi
            ;;
        "nginx")
            nginx_conf_dir="/etc/nginx"
            ;;
    esac
    
    if [ ! -d "$nginx_conf_dir" ]; then
        log_error "Êâæ‰∏çÂà∞ÈÖçÁΩÆÁõÆÂΩï: $nginx_conf_dir"
        return 1
    fi
    
    local config_path="$nginx_conf_dir/conf.d/custom_errors.conf"
    
    # ÂàõÂª∫ÈÖçÁΩÆÂÜÖÂÆπ
    local config_content=$(cat << EOF
# Ëá™ÂÆö‰πâÈîôËØØÈ°µÈù¢ÈÖçÁΩÆ
error_page 403 /403.html;
error_page 404 /404.html;
error_page 500 502 503 504 /50x.html;

location = /403.html {
    root /usr/share/nginx/html;
    internal;
    allow all;
}

location = /404.html {
    root /usr/share/nginx/html;
    internal;
    allow all;
}

location = /50x.html {
    root /usr/share/nginx/html;
    internal;
    allow all;
}
EOF
)

    # ÂÜôÂÖ•ÈÖçÁΩÆ
    mkdir -p "$(dirname "$config_path")"
    echo "$config_content" > "$config_path"
    log_success "NginxÈîôËØØÈ°µÈù¢ÈÖçÁΩÆÂ∑≤ÂàõÂª∫: $config_path"
}

# ÊµãËØïÈÖçÁΩÆ
test_config() {
    local env_type="$1"
    local target="$2"
    
    log_info "ÊµãËØïÈÖçÁΩÆ..."
    
    case "$env_type" in
        "docker")
            if docker exec "$target" nginx -t; then
                log_success "DockerÂÆπÂô®ÈÖçÁΩÆÊµãËØïÈÄöËøá"
                return 0
            else
                log_error "DockerÂÆπÂô®ÈÖçÁΩÆÊµãËØïÂ§±Ë¥•"
                return 1
            fi
            ;;
        "system")
            if sudo nginx -t 2>/dev/null || sudo openresty -t 2>/dev/null; then
                log_success "Á≥ªÁªüÊúçÂä°ÈÖçÁΩÆÊµãËØïÈÄöËøá"
                return 0
            else
                log_error "Á≥ªÁªüÊúçÂä°ÈÖçÁΩÆÊµãËØïÂ§±Ë¥•"
                return 1
            fi
            ;;
    esac
}

# ÈáçÊñ∞Âä†ËΩΩÊúçÂä°
reload_service() {
    local env_type="$1"
    local target="$2"
    
    log_info "ÈáçÊñ∞Âä†ËΩΩÊúçÂä°..."
    
    case "$env_type" in
        "docker")
            if docker exec "$target" nginx -s reload; then
                log_success "DockerÂÆπÂô®ÈÖçÁΩÆÂ∑≤ÈáçÊñ∞Âä†ËΩΩ"
                return 0
            else
                log_error "DockerÂÆπÂô®ÈáçÊñ∞Âä†ËΩΩÂ§±Ë¥•"
                return 1
            fi
            ;;
        "system")
            if systemctl reload nginx 2>/dev/null || systemctl reload openresty 2>/dev/null || nginx -s reload 2>/dev/null; then
                log_success "Á≥ªÁªüÊúçÂä°ÈÖçÁΩÆÂ∑≤ÈáçÊñ∞Âä†ËΩΩ"
                return 0
            else
                log_error "Á≥ªÁªüÊúçÂä°ÈáçÊñ∞Âä†ËΩΩÂ§±Ë¥•"
                return 1
            fi
            ;;
    esac
}

# ÊòæÁ§∫ÂÆåÊàê‰ø°ÊÅØ
show_completion() {
    local env_type="$1"
    local target="$2"
    
    echo
    log_success "Êó•Á≥ªÂä®Êº´È£éÊ†º403 & 404ÈîôËØØÈ°µÈù¢ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
    echo
    log_info "ÈÉ®ÁΩ≤ËØ¶ÊÉÖÔºö"
    log_info "- 403È°µÈù¢: /boot/data/dataxn/403.html"
    log_info "- 404È°µÈù¢: /boot/data/dataxn/404.html"
    
    case "$env_type" in
        "docker")
            log_info "- ÂÆπÂô®ÂêçÁß∞: $target"
            log_info "- ÈÖçÁΩÆË∑ØÂæÑ: /etc/nginx/conf.d/custom_errors.conf"
            ;;
        "system")
            log_info "- ÊúçÂä°Á±ªÂûã: $target"
            log_info "- ÈÖçÁΩÆË∑ØÂæÑ: /etc/nginx/conf.d/custom_errors.conf"
            ;;
    esac
    
    echo
    log_info "ÊµãËØïÊñπÊ≥ïÔºö"
    log_info "403ÊµãËØï: curl http://‰Ω†ÁöÑÂüüÂêç/Á¶ÅÊ≠¢ËÆøÈóÆÁöÑË∑ØÂæÑ"
    log_info "404ÊµãËØï: curl http://‰Ω†ÁöÑÂüüÂêç/‰∏çÂ≠òÂú®ÁöÑÈ°µÈù¢"
    echo
    log_success "Áé∞Âú®ÊÇ®ÁöÑOpenResty/NginxÂ∞ÜÊòæÁ§∫ÁæéËßÇÁöÑÊó•Á≥ªÂä®Êº´È£éÊ†ºÈîôËØØÈ°µÈù¢ÔºÅ"
}

# ‰∏ªÂáΩÊï∞
main() {
    echo
    log_info "ÂºÄÂßãÈÉ®ÁΩ≤Êó•Á≥ªÂä®Êº´È£éÊ†º403 & 404ÈîôËØØÈ°µÈù¢..."
    echo
    
    # Ê£ÄÊü•ÁéØÂ¢É
    local env_info=$(check_environment)
    if [ $? -ne 0 ]; then
        exit 1
    fi
    
    local env_type=$(echo "$env_info" | cut -d: -f1)
    local target=$(echo "$env_info" | cut -d: -f2)
    
    log_debug "ÁéØÂ¢ÉÁ±ªÂûã: $env_type, ÁõÆÊ†á: $target"
    
    # ÂàõÂª∫ÈîôËØØÈ°µÈù¢
    create_403_page
    create_404_page
    
    # ÂàõÂª∫ÈÖçÁΩÆ
    case "$env_type" in
        "docker")
            create_docker_nginx_config "$target"
            ;;
        "system")
            create_system_nginx_config "$target"
            ;;
    esac
    
    # ÊµãËØïÂπ∂ÈáçÊñ∞Âä†ËΩΩ
    if test_config "$env_type" "$target"; then
        reload_service "$env_type" "$target"
        show_completion "$env_type" "$target"
    else
        log_error "ÈÉ®ÁΩ≤Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÈÖçÁΩÆ"
        exit 1
    fi
}

# ÊòæÁ§∫‰ΩøÁî®ËØ¥Êòé
usage() {
    echo "OpenResty/Nginx 403 & 404 ÈîôËØØÈ°µÈù¢‰∏ÄÈîÆÈÉ®ÁΩ≤ËÑöÊú¨"
    echo
    echo "‰ΩøÁî®ÊñπÊ≥ï: $0 [ÈÄâÈ°π]"
    echo
    echo "ÈÄâÈ°π:"
    echo "  -h, --help    ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"
    echo "  -i, --install ÊâßË°åÂÆâË£ÖÈÉ®ÁΩ≤"
    echo
    echo "ÊîØÊåÅÁéØÂ¢É:"
    echo "  - DockerÂÆπÂô® (Nginx/OpenResty)"
    echo "  - Á≥ªÁªüÂÆâË£Ö (Nginx/OpenResty)"
    echo
    echo "Á§∫‰æã:"
    echo "  $0 --install  ÈÉ®ÁΩ≤403Âíå404È°µÈù¢"
}

# ÂèÇÊï∞Â§ÑÁêÜ
case "${1:-}" in
    -h|--help)
        usage
        exit 0
        ;;
    -i|--install|"")
        main
        ;;
    *)
        log_error "Êú™Áü•ÈÄâÈ°π: $1"
        usage
        exit 1
        ;;
esac
