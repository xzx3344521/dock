#!/bin/bash

# Êó•Á≥ªÂä®Êº´È£éÊ†º404È°µÈù¢‰∏ÄÈîÆÈÉ®ÁΩ≤ËÑöÊú¨ - ‰øÆÂ§çÁâà
# ÈÄÇÁî®‰∫éNginxÂèçÂêë‰ª£ÁêÜÁéØÂ¢É

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ê£ÄÊü•NginxÊòØÂê¶ÂÆâË£ÖÔºà‰øÆÂ§çÁâàÔºâ
check_nginx() {
    log_info "Ê£ÄÊü•NginxÂÆâË£ÖÁä∂ÊÄÅ..."
    
    # Â§öÁßçÊñπÂºèÊ£ÄÊü•Nginx
    if command -v nginx &> /dev/null; then
        log_success "ÈÄöËøácommandÂëΩ‰ª§Ê£ÄÊµãÂà∞Nginx"
        return 0
    fi
    
    if systemctl is-active --quiet nginx 2>/dev/null; then
        log_success "ÈÄöËøásystemctlÊ£ÄÊµãÂà∞NginxÊúçÂä°Ê≠£Âú®ËøêË°å"
        return 0
    fi
    
    if ps aux | grep -v grep | grep nginx &> /dev/null; then
        log_success "ÈÄöËøáËøõÁ®ãÊ£ÄÊµãÂà∞NginxÊ≠£Âú®ËøêË°å"
        return 0
    fi
    
    if [ -f /usr/sbin/nginx ] || [ -f /usr/local/nginx/sbin/nginx ]; then
        log_success "ÈÄöËøáÊñá‰ª∂Ë∑ØÂæÑÊ£ÄÊµãÂà∞Nginx"
        return 0
    fi
    
    log_warning "Êú™Ê£ÄÊµãÂà∞NginxÔºå‰ΩÜÁªßÁª≠ÊâßË°åÔºàÂèØËÉΩÊòØËá™ÂÆö‰πâÂÆâË£ÖÔºâ"
    return 0
}

# ÂàõÂª∫404È°µÈù¢
create_404_page() {
    local html_path="/usr/share/nginx/html/404.html"
    local custom_path="/var/www/html/404.html"
    
    log_info "Ê≠£Âú®ÂàõÂª∫Êó•Á≥ªÂä®Êº´È£éÊ†º404È°µÈù¢..."
    
    # Â∞ùËØïÂ§ö‰∏™ÂèØËÉΩÁöÑHTMLÁõÆÂΩï
    for path in "$html_path" "$custom_path"; do
        local dir=$(dirname "$path")
        if [ -d "$dir" ]; then
            html_path="$path"
            log_info "‰ΩøÁî®HTMLÁõÆÂΩï: $dir"
            break
        fi
    done
    
    # Â¶ÇÊûúÁõÆÂΩï‰∏çÂ≠òÂú®ÔºåÂàõÂª∫ÂÆÉ
    local dir=$(dirname "$html_path")
    if [ ! -d "$dir" ]; then
        log_warning "ÁõÆÂΩï $dir ‰∏çÂ≠òÂú®ÔºåÊ≠£Âú®ÂàõÂª∫..."
        mkdir -p "$dir"
    fi
    
    cat > "$html_path" << 'EOF'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>È°µÈù¢Êú™ÊâæÂà∞ - 404ÈîôËØØ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial Rounded MT Bold', 'Hiragino Maru Gothic ProN', 'Yu Gothic', sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #ffdde1 0%, #ee9ca7 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            color: #5a3d5c;
        }
        
        .container {
            max-width: 800px;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.85);
            border-radius: 25px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
            position: relative;
            overflow: hidden;
            border: 3px solid #ffb6c1;
        }
        
        .anime-character {
            width: 180px;
            height: 200px;
            margin: 0 auto 20px;
            position: relative;
        }
        
        .character-head {
            width: 120px;
            height: 120px;
            background-color: #fff;
            border-radius: 50%;
            margin: 0 auto;
            position: relative;
            border: 3px solid #ffb6c1;
            z-index: 2;
        }
        
        .character-hair {
            width: 140px;
            height: 80px;
            background-color: #ff69b4;
            border-radius: 70px 70px 0 0;
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1;
        }
        
        .character-eyes {
            display: flex;
            justify-content: space-around;
            width: 80px;
            margin: 40px auto 0;
        }
        
        .eye {
            width: 20px;
            height: 30px;
            background-color: #5a3d5c;
            border-radius: 50%;
            position: relative;
            overflow: hidden;
        }
        
        .eye::after {
            content: '';
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: white;
            border-radius: 50%;
            top: 5px;
            left: 5px;
        }
        
        .character-mouth {
            width: 30px;
            height: 10px;
            background-color: #ff69b4;
            border-radius: 0 0 15px 15px;
            margin: 15px auto 0;
        }
        
        .character-body {
            width: 100px;
            height: 80px;
            background-color: #ffb6c1;
            border-radius: 20px 20px 0 0;
            margin: -10px auto 0;
            position: relative;
            z-index: 1;
        }
        
        .error-code {
            font-size: 120px;
            font-weight: bold;
            color: #ff69b4;
            text-shadow: 3px 3px 0 #ffb6c1;
            margin: 10px 0;
            line-height: 1;
        }
        
        h1 {
            font-size: 32px;
            margin-bottom: 20px;
            color: #5a3d5c;
        }
        
        p {
            font-size: 18px;
            line-height: 1.6;
            margin-bottom: 30px;
            color: #7a5c7d;
        }
        
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 12px 25px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
        
        .btn-primary {
            background-color: #ff69b4;
            color: white;
            box-shadow: 0 4px 0 #d4508f;
        }
        
        .btn-secondary {
            background-color: #b19cd9;
            color: white;
            box-shadow: 0 4px 0 #8a7bb5;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 0 rgba(0, 0, 0, 0.2);
        }
        
        .btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 0 rgba(0, 0, 0, 0.2);
        }
        
        .floating-elements {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            pointer-events: none;
        }
        
        .floating-element {
            position: absolute;
            opacity: 0.7;
            animation: float 6s ease-in-out infinite;
        }
        
        .element-1 {
            top: 10%;
            left: 5%;
            animation-delay: 0s;
        }
        
        .element-2 {
            top: 20%;
            right: 10%;
            animation-delay: 2s;
        }
        
        .element-3 {
            bottom: 30%;
            left: 15%;
            animation-delay: 4s;
        }
        
        @keyframes float {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-20px);
            }
        }
        
        .sparkle {
            position: absolute;
            width: 20px;
            height: 20px;
            background-color: #fff;
            border-radius: 50%;
            opacity: 0;
            animation: sparkle 3s linear infinite;
        }
        
        @keyframes sparkle {
            0%, 100% {
                opacity: 0;
                transform: scale(0);
            }
            50% {
                opacity: 1;
                transform: scale(1);
            }
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 25px;
            }
            
            .error-code {
                font-size: 80px;
            }
            
            h1 {
                font-size: 24px;
            }
            
            p {
                font-size: 16px;
            }
            
            .action-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="floating-elements">
            <div class="floating-element element-1">üå∏</div>
            <div class="floating-element element-2">‚≠ê</div>
            <div class="floating-element element-3">üê±</div>
        </div>
        
        <div class="anime-character">
            <div class="character-hair"></div>
            <div class="character-head">
                <div class="character-eyes">
                    <div class="eye"></div>
                    <div class="eye"></div>
                </div>
                <div class="character-mouth"></div>
            </div>
            <div class="character-body"></div>
        </div>
        
        <div class="error-code">404</div>
        <h1>„Åä„Å£„Å®ÔºÅ„Éö„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</h1>
        <p>Áî≥„ÅóË®≥„ÅÇ„Çä„Åæ„Åõ„Çì„Åå„ÄÅ„ÅäÊé¢„Åó„ÅÆ„Éö„Éº„Ç∏„ÅØÂ≠òÂú®„Åó„Å™„ÅÑ„Åã„ÄÅÁßªÂãï„Åó„ÅüÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ<br>
        Ëø∑Â≠ê„Å´„Å™„Å£„Åü„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅÆ„Çà„ÅÜ„Å´„ÄÅ„Éö„Éº„Ç∏„ÇÇ„Å©„Åì„Åã„Å∏Ë°å„Å£„Å¶„Åó„Åæ„Å£„Åü„Çà„ÅÜ„Åß„Åô„ÄÇ</p>
        
        <div class="action-buttons">
            <a href="/" class="btn btn-primary">„Éõ„Éº„É†„Å´Êàª„Çã</a>
            <a href="javascript:history.back()" class="btn btn-secondary">Ââç„ÅÆ„Éö„Éº„Ç∏„Å´Êàª„Çã</a>
        </div>
    </div>

    <script>
        // Ê∑ªÂä†Èó™ÁÉÅÊïàÊûú
        document.addEventListener('DOMContentLoaded', function() {
            const container = document.querySelector('.container');
            
            for (let i = 0; i < 15; i++) {
                const sparkle = document.createElement('div');
                sparkle.classList.add('sparkle');
                
                // ÈöèÊú∫‰ΩçÁΩÆ
                sparkle.style.left = Math.random() * 100 + '%';
                sparkle.style.top = Math.random() * 100 + '%';
                
                // ÈöèÊú∫Â§ßÂ∞è
                const size = Math.random() * 10 + 5;
                sparkle.style.width = size + 'px';
                sparkle.style.height = size + 'px';
                
                // ÈöèÊú∫Âª∂Ëøü
                sparkle.style.animationDelay = Math.random() * 5 + 's';
                
                container.appendChild(sparkle);
            }
        });
    </script>
</body>
</html>
EOF

    log_success "404È°µÈù¢Â∑≤ÂàõÂª∫: $html_path"
}

# Êü•ÊâæNginxÈÖçÁΩÆÁõÆÂΩï
find_nginx_config() {
    log_info "Êü•ÊâæNginxÈÖçÁΩÆÁõÆÂΩï..."
    
    local possible_paths=(
        "/etc/nginx"
        "/usr/local/nginx/conf"
        "/usr/local/etc/nginx"
    )
    
    for path in "${possible_paths[@]}"; do
        if [ -d "$path" ]; then
            echo "$path"
            log_success "ÊâæÂà∞NginxÈÖçÁΩÆÁõÆÂΩï: $path"
            return 0
        fi
    done
    
    log_error "Êú™ÊâæÂà∞NginxÈÖçÁΩÆÁõÆÂΩï"
    return 1
}

# ÈÖçÁΩÆNginx
configure_nginx() {
    log_info "Ê≠£Âú®ÈÖçÁΩÆNginx..."
    
    local nginx_conf_dir=$(find_nginx_config)
    if [ $? -ne 0 ]; then
        log_error "Êó†Ê≥ïÊâæÂà∞NginxÈÖçÁΩÆÁõÆÂΩï"
        return 1
    fi
    
    local sites_available_dir="$nginx_conf_dir/sites-available"
    local sites_enabled_dir="$nginx_conf_dir/sites-enabled"
    local conf_d_dir="$nginx_conf_dir/conf.d"
    
    # ÂàõÂª∫404ÈÖçÁΩÆÁâáÊÆµ
    local error_conf="$nginx_conf_dir/conf.d/custom_errors.conf"
    cat > "$error_conf" << 'EOF'
# Ëá™ÂÆö‰πâÈîôËØØÈ°µÈù¢ÈÖçÁΩÆ
error_page 404 /404.html;
error_page 500 502 503 504 /50x.html;

location = /404.html {
    root /usr/share/nginx/html;
    internal;
}

location = /50x.html {
    root /usr/share/nginx/html;
    internal;
}
EOF

    log_success "Â∑≤ÂàõÂª∫ÈîôËØØÈ°µÈù¢ÈÖçÁΩÆ: $error_conf"
    
    # Â¶ÇÊûúÂ≠òÂú®sites-availableÁõÆÂΩïÔºå‰πü‰∏∫ÊØè‰∏™Á´ôÁÇπÈÖçÁΩÆ
    if [ -d "$sites_available_dir" ]; then
        for config_file in "$sites_available_dir"/*; do
            if [[ -f "$config_file" && ! -L "$config_file" ]]; then
                local config_name=$(basename "$config_file")
                log_info "Ê£ÄÊü•Á´ôÁÇπÈÖçÁΩÆ: $config_name"
                
                # Â§á‰ªΩÂéüÈÖçÁΩÆ
                cp "$config_file" "$config_file.backup.$(date +%Y%m%d%H%M%S)"
                
                # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®404ÈÖçÁΩÆ
                if ! grep -q "error_page 404" "$config_file"; then
                    # Âú®serverÂùó‰∏≠Ê∑ªÂä†404ÈÖçÁΩÆ
                    if grep -q "server {" "$config_file"; then
                        sed -i '/server {/a\\n    # Ëá™ÂÆö‰πâÈîôËØØÈ°µÈù¢\n    error_page 404 /404.html;\n    location = /404.html {\n        root /usr/share/nginx/html;\n        internal;\n    }' "$config_file"
                        log_success "Â∑≤‰∏∫ $config_name Ê∑ªÂä†404ÈÖçÁΩÆ"
                    fi
                else
                    log_info "$config_name Â∑≤Êúâ404ÈÖçÁΩÆÔºåË∑≥Ëøá"
                fi
            fi
        done
    fi
}

# ÊµãËØïNginxÈÖçÁΩÆ
test_nginx() {
    log_info "ÊµãËØïNginxÈÖçÁΩÆ..."
    if nginx -t 2>/dev/null || /usr/local/nginx/sbin/nginx -t 2>/dev/null; then
        log_success "NginxÈÖçÁΩÆÊµãËØïÈÄöËøá"
        return 0
    else
        log_error "NginxÈÖçÁΩÆÊµãËØïÂ§±Ë¥•"
        return 1
    fi
}

# ÈáçÊñ∞Âä†ËΩΩNginx
reload_nginx() {
    log_info "ÈáçÊñ∞Âä†ËΩΩNginxÈÖçÁΩÆ..."
    
    # Â§öÁßçÊñπÂºèÈáçËΩΩNginx
    if systemctl reload nginx 2>/dev/null; then
        log_success "ÈÄöËøásystemctlÈáçÊñ∞Âä†ËΩΩNginx"
        return 0
    fi
    
    if service nginx reload 2>/dev/null; then
        log_success "ÈÄöËøáserviceÈáçÊñ∞Âä†ËΩΩNginx"
        return 0
    fi
    
    if nginx -s reload 2>/dev/null; then
        log_success "ÈÄöËøánginxÂëΩ‰ª§ÈáçÊñ∞Âä†ËΩΩNginx"
        return 0
    fi
    
    log_warning "Êó†Ê≥ïËá™Âä®ÈáçÊñ∞Âä†ËΩΩNginxÔºåËØ∑ÊâãÂä®ÊâßË°å: nginx -s reload"
    return 1
}

# ÊòæÁ§∫ÂÆåÊàê‰ø°ÊÅØ
show_completion() {
    echo
    log_success "Êó•Á≥ªÂä®Êº´È£éÊ†º404È°µÈù¢ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
    echo
    log_info "ÈÉ®ÁΩ≤ËØ¶ÊÉÖÔºö"
    log_info "- 404È°µÈù¢‰ΩçÁΩÆ: /usr/share/nginx/html/404.html"
    log_info "- NginxÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞"
    log_info "- ÂàõÂª∫‰∫ÜËá™ÂÆö‰πâÈîôËØØÈ°µÈù¢ÈÖçÁΩÆ"
    echo
    log_info "ÊÇ®ÂèØ‰ª•ÈÄöËøáËÆøÈóÆ‰∏Ä‰∏™‰∏çÂ≠òÂú®ÁöÑURLÊù•ÊµãËØï404È°µÈù¢"
    log_info "‰æãÂ¶Ç: curl http://your-domain/not-exist-page"
    echo
    log_warning "Â¶ÇÊûúÈ°µÈù¢Êú™Á´ãÂç≥ÁîüÊïàÔºåËØ∑ÊâãÂä®ÈáçÂêØNginxÊúçÂä°"
}

# ‰∏ªÂáΩÊï∞
main() {
    echo
    log_info "ÂºÄÂßãÈÉ®ÁΩ≤Êó•Á≥ªÂä®Êº´È£éÊ†º404È°µÈù¢..."
    echo
    
    # Ê£ÄÊü•ÁéØÂ¢É
    check_nginx
    
    # ÊâßË°åÈÉ®ÁΩ≤Ê≠•È™§
    create_404_page
    configure_nginx
    
    # ÊµãËØïÂπ∂ÈáçÊñ∞Âä†ËΩΩNginx
    if test_nginx; then
        reload_nginx
        show_completion
    else
        log_error "ÈÉ®ÁΩ≤Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•NginxÈÖçÁΩÆ"
        exit 1
    fi
}

# ÊòæÁ§∫‰ΩøÁî®ËØ¥Êòé
usage() {
    echo "Êó•Á≥ªÂä®Êº´È£éÊ†º404È°µÈù¢‰∏ÄÈîÆÈÉ®ÁΩ≤ËÑöÊú¨ - ‰øÆÂ§çÁâà"
    echo
    echo "‰ΩøÁî®ÊñπÊ≥ï: $0 [ÈÄâÈ°π]"
    echo
    echo "ÈÄâÈ°π:"
    echo "  -h, --help    ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"
    echo "  -i, --install ÊâßË°åÂÆâË£ÖÈÉ®ÁΩ≤"
    echo
    echo "Á§∫‰æã:"
    echo "  $0 --install  ÈÉ®ÁΩ≤404È°µÈù¢"
}

# ÂèÇÊï∞Â§ÑÁêÜ
case "${1:-}" in
    -h|--help)
        usage
        exit 0
        ;;
    -i|--install|"")
        main
        ;;
    *)
        log_error "Êú™Áü•ÈÄâÈ°π: $1"
        usage
        exit 1
        ;;
esac
